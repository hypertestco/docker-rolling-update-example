worker_processes 1;

events {
    worker_connections 1024;
}

http {
    # Docker's embedded DNS server is at 127.0.0.11
    # This tells Nginx to use it and re-resolve 'app-service' every 5 seconds.
    resolver 127.0.0.11 valid=5s;

    # upstream backend_app {
    #     # 'app-service' will be the network alias for our Node.js containers.
    #     # Nginx will DNS resolve this name.
    #     # The 'resolve' directive (Nginx Plus feature) is not used here.
    #     # Instead, Nginx relies on the 'resolver' in the http block.
    #     server app-service:8080;
    # }

    server {
        listen 80;
        server_name localhost;

        location / {
            set $backend "http://app-service:8080";
            proxy_pass $backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Optional: health check for upstream (more advanced)
            # For this basic demo, we rely on DNS resolution.
            # proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
        }

        # Optional: You can add a status page for Nginx itself
        # location /nginx_status {
        #     stub_status on;
        #     access_log off;
        #     allow 127.0.0.1; # Or your IP
        #     deny all;
        # }
    }
}